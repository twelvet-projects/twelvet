DROP DATABASE IF EXISTS `twelvet_gen`;

CREATE DATABASE `twelvet_gen` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

USE `twelvet_gen`;

-- ----------------------------
-- Table structure for gen_datasource_conf
-- ----------------------------
DROP TABLE IF EXISTS `gen_datasource_conf`;
CREATE TABLE `gen_datasource_conf`
(
    `id`          bigint(20)                                                    NOT NULL AUTO_INCREMENT COMMENT '主键',
    `name`        varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NULL DEFAULT NULL COMMENT '别名',
    `url`         varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'jdbcurl',
    `username`    varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NULL DEFAULT NULL COMMENT '用户名',
    `password`    varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NULL DEFAULT NULL COMMENT '密码',
    `create_time` datetime                                                      NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `update_time` datetime                                                      NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新',
    `del_flag`    char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci      NULL DEFAULT '0' COMMENT '删除标记',
    `ds_type`     varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NULL DEFAULT NULL COMMENT '数据库类型',
    `conf_type`   char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci      NULL DEFAULT NULL COMMENT '配置类型(0：主机模式，1：JDBC)',
    `ds_name`     varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NULL DEFAULT NULL COMMENT '数据库名称',
    `instance`    varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NULL DEFAULT NULL COMMENT '实例',
    `port`        int(11)                                                       NULL DEFAULT NULL COMMENT '端口',
    `host`        varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '主机',
    PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB
  AUTO_INCREMENT = 1
  CHARACTER SET = utf8mb4
  COLLATE = utf8mb4_general_ci COMMENT = '数据源表'
  ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of gen_datasource_conf
-- ----------------------------

-- ----------------------------
-- Table structure for gen_field_type
-- ----------------------------
DROP TABLE IF EXISTS `gen_field_type`;
CREATE TABLE `gen_field_type`
(
    `id`           bigint(20)                                                    NOT NULL AUTO_INCREMENT COMMENT 'id',
    `column_type`  varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '字段类型',
    `attr_type`    varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '属性类型',
    `package_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '属性包名',
    `create_time`  datetime                                                      NULL DEFAULT NULL COMMENT '创建时间',
    `create_by`    varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NULL DEFAULT NULL COMMENT '创建人',
    `update_time`  datetime                                                      NULL DEFAULT NULL COMMENT '修改时间',
    `update_by`    varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci  NULL DEFAULT NULL COMMENT '修改人',
    `del_flag`     char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci      NULL DEFAULT '0' COMMENT '删除标记',
    PRIMARY KEY (`id`) USING BTREE,
    UNIQUE INDEX `column_type` (`column_type`) USING BTREE
) ENGINE = InnoDB
  AUTO_INCREMENT = 32
  CHARACTER SET = utf8mb4
  COLLATE = utf8mb4_general_ci COMMENT = '字段类型管理'
  ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of gen_field_type
-- ----------------------------
INSERT INTO `gen_field_type`
VALUES (1, 'datetime', 'LocalDateTime', 'java.time.LocalDateTime', '2023-02-06 08:45:10', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (2, 'date', 'LocalDate', 'java.time.LocalDate', '2023-02-06 08:45:10', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (3, 'tinyint', 'Integer', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (4, 'smallint', 'Integer', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (5, 'mediumint', 'Integer', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (6, 'int', 'Integer', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (7, 'integer', 'Integer', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (8, 'bigint', 'Long', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (9, 'float', 'Float', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (10, 'double', 'Double', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (11, 'decimal', 'BigDecimal', 'java.math.BigDecimal', '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (12, 'bit', 'Boolean', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (13, 'char', 'String', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (14, 'varchar', 'String', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (15, 'tinytext', 'String', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (16, 'text', 'String', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (17, 'mediumtext', 'String', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (18, 'longtext', 'String', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (19, 'timestamp', 'LocalDateTime', 'java.time.LocalDateTime', '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (20, 'NUMBER', 'Integer', NULL, '2023-02-06 08:45:11', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (21, 'BINARY_INTEGER', 'Integer', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (22, 'BINARY_FLOAT', 'Float', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (23, 'BINARY_DOUBLE', 'Double', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (24, 'VARCHAR2', 'String', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (25, 'NVARCHAR', 'String', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (26, 'NVARCHAR2', 'String', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (27, 'CLOB', 'String', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (28, 'int8', 'Long', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (29, 'int4', 'Integer', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (30, 'int2', 'Integer', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (31, 'numeric', 'BigDecimal', 'java.math.BigDecimal', '2023-02-06 08:45:12', NULL, NULL, NULL, '0');
INSERT INTO `gen_field_type`
VALUES (32, 'json', 'String', NULL, '2023-02-06 08:45:12', NULL, NULL, NULL, '0');

-- ----------------------------
-- Table structure for gen_template
-- ----------------------------
DROP TABLE IF EXISTS `gen_template`;
CREATE TABLE `gen_template`
(
    `id`             bigint(20)                                                    NOT NULL AUTO_INCREMENT COMMENT '主键',
    `template_name`  varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '模板名称',
    `generator_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '模板路径',
    `template_desc`  varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '模板描述',
    `template_code`  text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci         NOT NULL COMMENT '模板代码',
    `create_time`    datetime                                                      NULL     DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `update_time`    datetime                                                      NULL     DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新',
    `del_flag`       char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci      NOT NULL DEFAULT '0' COMMENT '删除标记',
    `create_by`      varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci        NOT NULL DEFAULT ' ' COMMENT '创建人',
    `update_by`      varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci        NOT NULL DEFAULT ' ' COMMENT '修改人',
    PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB
  AUTO_INCREMENT = 1
  CHARACTER SET = utf8mb4
  COLLATE = utf8mb4_general_ci COMMENT = '代码生成业务模板'
  ROW_FORMAT = Dynamic;

INSERT INTO `gen_template`
VALUES (1, 'Controller', '${backendPath}/src/main/java/${packagePath}/controller/${ClassName}Controller.java',
        'Controller',
        'package ${packageName}.controller;\n\nimport java.util.List;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport io.swagger.v3.oas.annotations.Operation;\nimport com.twelvet.framework.log.annotation.Log;\nimport com.twelvet.framework.log.enums.BusinessType;\nimport com.twelvet.framework.core.application.page.TableDataInfo;\nimport com.twelvet.api.${moduleName}.domain.${ClassName};\nimport ${packageName}.service.I${ClassName}Service;\nimport com.twelvet.framework.core.application.controller.TWTController;\nimport com.twelvet.framework.core.application.domain.AjaxResult;\nimport com.twelvet.framework.core.application.domain.JsonResult;\nimport com.pig4cloud.plugin.excel.annotation.ResponseExcel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n#if($table.crud || $table.sub)\nimport com.twelvet.framework.jdbc.web.utils.PageUtils;\n#elseif($table.tree)\n#end\n\n/**\n * ${functionName}Controller\n *\n * @author ${author}\n * @WebSite twelvet.cn\n * @date ${datetime}\n */\n@Tag(description = \"${ClassName}Controller\", name = \"${functionName}\")\n@RestController\n@RequestMapping(\"/${businessName}\")\npublic class ${ClassName}Controller extends TWTController\n{\n    @Autowired\n    private I${ClassName}Service ${className}Service;\n\n    /**\n     * 查询${functionName}分页\n     */\n    @Operation(summary = \"查询${functionName}分页\")\n    @PreAuthorize(\"@role.hasPermi(\'${permissionPrefix}:list\')\")\n    @GetMapping(\"/pageQuery\")\n    #if($table.crud || $table.sub)\n    public JsonResult<TableDataInfo<${ClassName}>> pageQuery(${ClassName} ${className})\n    {\n        PageUtils.startPage();\n        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});\n        return JsonResult.success(PageUtils.getDataTable(list));\n    }\n    #elseif($table.tree)\n        public JsonResult<List<${ClassName}>> list(${ClassName} ${className})\n        {\n            List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});\n            return JsonResult.success(list);\n        }\n    #end\n\n    /**\n     * 导出${functionName}列表\n     */\n    @ResponseExcel(name = \"${functionName}\")\n    @Operation(summary = \"导出${functionName}列表\")\n    @PreAuthorize(\"@role.hasPermi(\'${permissionPrefix}:export\')\")\n    @Log(service = \"${functionName}\", businessType = BusinessType.EXPORT)\n    @PostMapping(\"/export\")\n    public List<${ClassName}> export(${ClassName} ${className})\n    {\n        return ${className}Service.select${ClassName}List(${className});\n    }\n\n    /**\n     * 获取${functionName}详细信息\n     */\n    @Operation(summary = \"获取${functionName}详细信息\")\n    @PreAuthorize(\"@role.hasPermi(\'${permissionPrefix}:query\')\")\n    @GetMapping(value = \"/{${pkColumn.javaField}}\")\n    public JsonResult<${ClassName}> getInfo(@PathVariable(\"${pkColumn.javaField}\") ${pkColumn.javaType} ${pkColumn.javaField})\n    {\n        return JsonResult.success(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));\n    }\n\n    /**\n     * 新增${functionName}\n     */\n    @Operation(summary = \"新增${functionName}\")\n    @PreAuthorize(\"@role.hasPermi(\'${permissionPrefix}:add\')\")\n    @Log(service = \"${functionName}\", businessType = BusinessType.INSERT)\n    @PostMapping\n    public JsonResult<String> add(@RequestBody ${ClassName} ${className})\n    {\n        return json(${className}Service.insert${ClassName}(${className}));\n    }\n\n    /**\n     * 修改${functionName}\n     */\n    @Operation(summary = \"修改${functionName}\")\n    @PreAuthorize(\"@role.hasPermi(\'${permissionPrefix}:edit\')\")\n    @Log(service = \"${functionName}\", businessType = BusinessType.UPDATE)\n    @PutMapping\n    public JsonResult<String> edit(@RequestBody ${ClassName} ${className})\n    {\n        return json(${className}Service.update${ClassName}(${className}));\n    }\n\n    /**\n     * 删除${functionName}\n     */\n    @Operation(summary = \"删除${functionName}\")\n    @PreAuthorize(\"@role.hasPermi(\'${permissionPrefix}:remove\')\")\n    @Log(service = \"${functionName}\", businessType = BusinessType.DELETE)\n    @DeleteMapping(\"/{${pkColumn.javaField}s}\")\n    public JsonResult<String> remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s)\n    {\n        return json(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));\n    }\n}\n',
        '2023-11-07 17:39:44', '2023-11-10 11:12:11', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (2, 'Service', '${backendPath}/src/main/java/${packagePath}/service/${ClassName}Service.java', 'Service',
        'package ${packageName}.service;\n\nimport java.util.List;\n\nimport com.twelvet.api.${moduleName}.domain.${ClassName};\n\n/**\n * ${functionName}Service接口\n *\n * @author ${author}\n * @WebSite twelvet.cn\n * @date ${datetime}\n */\npublic interface I${ClassName}Service {\n    /**\n     * 查询${functionName}\n     *\n     * @param ${pkColumn.javaField} ${functionName}主键\n     * @return ${functionName}\n     */\n    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField});\n\n    /**\n     * 查询${functionName}列表\n     *\n     * @param ${className} ${functionName}\n     * @return ${functionName}集合\n     */\n    public List<${ClassName}> select${ClassName}List(${ClassName} ${className});\n\n    /**\n     * 新增${functionName}\n     *\n     * @param ${className} ${functionName}\n     * @return 结果\n     */\n    public int insert${ClassName}(${ClassName} ${className});\n\n    /**\n     * 修改${functionName}\n     *\n     * @param ${className} ${functionName}\n     * @return 结果\n     */\n    public int update${ClassName}(${ClassName} ${className});\n\n    /**\n     * 批量删除${functionName}\n     *\n     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键集合\n     * @return 结果\n     */\n    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s);\n\n    /**\n     * 删除${functionName}信息\n     *\n     * @param ${pkColumn.javaField} ${functionName}主键\n     * @return 结果\n     */\n    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField});\n}\n',
        '2023-11-08 10:38:40', '2023-11-10 11:12:34', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (3, 'Mapper', '${backendPath}/src/main/java/${packagePath}/mapper/${ClassName}Mapper.java', 'Mapper',
        'package ${packageName}.mapper;\n\nimport java.util.List;\n\nimport com.twelvet.api.${moduleName}.domain.${ClassName};\n#if($table.sub)\nimport com.twelvet.api.${moduleName}.domain.${subClassName};\n#end\n\n/**\n * ${functionName}Mapper接口\n *\n * @author ${author}\n * @WebSite twelvet.cn\n * @date ${datetime}\n */\npublic interface ${ClassName}Mapper {\n\n    /**\n     * 查询${functionName}\n     *\n     * @param ${pkColumn.javaField} ${functionName}主键\n     * @return ${functionName}\n     */\n    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField});\n\n    /**\n     * 查询${functionName}列表\n     *\n     * @param ${className} ${functionName}\n     * @return ${functionName}集合\n     */\n    public List<${ClassName}> select${ClassName}List(${ClassName} ${className});\n\n    /**\n     * 新增${functionName}\n     *\n     * @param ${className} ${functionName}\n     * @return 结果\n     */\n    public int insert${ClassName}(${ClassName} ${className});\n\n    /**\n     * 修改${functionName}\n     *\n     * @param ${className} ${functionName}\n     * @return 结果\n     */\n    public int update${ClassName}(${ClassName} ${className});\n\n    /**\n     * 删除${functionName}\n     *\n     * @param ${pkColumn.javaField} ${functionName}主键\n     * @return 结果\n     */\n    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField});\n\n    /**\n     * 批量删除${functionName}\n     *\n     * @param ${pkColumn.javaField}s 需要删除的数据主键集合\n     * @return 结果\n     */\n    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s);\n#if($table.sub)\n\n    /**\n     * 批量删除${subTable.functionName}\n     *\n     * @param ${pkColumn.javaField}s 需要删除的数据主键集合\n     * @return 结果\n     */\n    public int delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaType}[] ${pkColumn.javaField}s);\n\n    /**\n     * 批量新增${subTable.functionName}\n     *\n     * @param ${subclassName}List ${subTable.functionName}列表\n     * @return 结果\n     */\n    public int batch${subClassName}(List<${subClassName}> ${subclassName}List);\n\n\n    /**\n     * 通过${functionName}主键删除${subTable.functionName}信息\n     *\n     * @param ${pkColumn.javaField} ${functionName}ID\n     * @return 结果\n     */\n    public int delete${subClassName}By${subTableFkClassName}(${pkColumn.javaType} ${pkColumn.javaField});\n#end\n}\n',
        '2023-11-09 14:27:08', '2023-11-10 11:12:27', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (4, 'Service', '${backendPath}/src/main/java/${packagePath}/service/${ClassName}Service.java', 'Service',
        'package ${packageName}.service;\n\nimport java.util.List;\n\nimport com.twelvet.api.${moduleName}.domain.${ClassName};\n\n/**\n * ${functionName}Service接口\n *\n * @author ${author}\n * @WebSite twelvet.cn\n * @date ${datetime}\n */\npublic interface I${ClassName}Service {\n    /**\n     * 查询${functionName}\n     *\n     * @param ${pkColumn.javaField} ${functionName}主键\n     * @return ${functionName}\n     */\n    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField});\n\n    /**\n     * 查询${functionName}列表\n     *\n     * @param ${className} ${functionName}\n     * @return ${functionName}集合\n     */\n    public List<${ClassName}> select${ClassName}List(${ClassName} ${className});\n\n    /**\n     * 新增${functionName}\n     *\n     * @param ${className} ${functionName}\n     * @return 结果\n     */\n    public int insert${ClassName}(${ClassName} ${className});\n\n    /**\n     * 修改${functionName}\n     *\n     * @param ${className} ${functionName}\n     * @return 结果\n     */\n    public int update${ClassName}(${ClassName} ${className});\n\n    /**\n     * 批量删除${functionName}\n     *\n     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键集合\n     * @return 结果\n     */\n    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s);\n\n    /**\n     * 删除${functionName}信息\n     *\n     * @param ${pkColumn.javaField} ${functionName}主键\n     * @return 结果\n     */\n    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField});\n}',
        '2023-11-09 14:27:38', '2023-11-09 14:27:48', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (5, 'ServiceImpl', '${backendPath}/src/main/java/${packagePath}/service/impl/${ClassName}ServiceImpl.java',
        'ServiceImpl',
        'package ${packageName}.service.impl;\n\nimport java.util.List;\n#foreach ($column in $columns)\n#if($column.javaField == \'createTime\' || $column.javaField == \'updateTime\')\nimport java.util.Date;\nimport com.twelvet.framework.utils.DateUtils;\n#break\n#end\n#end\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.twelvet.framework.security.utils.SecurityUtils;\nimport org.springframework.stereotype.Service;\n#if($table.sub)\nimport java.util.ArrayList;\nimport com.twelvet.framework.core.utils.StringUtils;\nimport org.springframework.transaction.annotation.Transactional;\nimport com.twelvet.api.${moduleName}.domain.${ClassName};\n#end\nimport ${packageName}.mapper.${ClassName}Mapper;\nimport com.twelvet.api.${moduleName}.domain.${ClassName};\nimport ${packageName}.service.I${ClassName}Service;\n\n/**\n * ${functionName}Service业务层处理\n *\n * @author ${author}\n * @WebSite twelvet.cn\n * @date ${datetime}\n */\n@Service\npublic class ${ClassName}ServiceImpl implements I${ClassName}Service {\n\n    @Autowired\n    private ${ClassName}Mapper ${className}Mapper;\n\n    /**\n     * 查询${functionName}\n     *\n     * @param ${pkColumn.javaField} ${functionName}主键\n     * @return ${functionName}\n     */\n    @Override\n    public ${ClassName} select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})\n    {\n        return ${className}Mapper.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});\n    }\n\n    /**\n     * 查询${functionName}列表\n     *\n     * @param ${className} ${functionName}\n     * @return ${functionName}\n     */\n    @Override\n    public List<${ClassName}> select${ClassName}List(${ClassName} ${className})\n    {\n        return ${className}Mapper.select${ClassName}List(${className});\n    }\n\n    /**\n     * 新增${functionName}\n     *\n     * @param ${className} ${functionName}\n     * @return 结果\n     */\n#if($table.sub)\n    @Transactional\n#end\n    @Override\n    public int insert${ClassName}(${ClassName} ${className})\n    {\n#foreach ($column in $columns)\n#if($column.javaField == \'createTime\')\n        Date nowDate = DateUtils.getNowDate();\n        ${className}.setCreateTime(nowDate);\n        ${className}.setUpdateTime(nowDate);\n        String loginUsername = SecurityUtils.getUsername();\n        ${className}.setCreateBy(loginUsername);\n        ${className}.setUpdateBy(loginUsername);\n#end\n#end\n#if($table.sub)\n        int rows = ${className}Mapper.insert${ClassName}(${className});\n        insert${subClassName}(${className});\n        return rows;\n#else\n        return ${className}Mapper.insert${ClassName}(${className});\n#end\n    }\n\n    /**\n     * 修改${functionName}\n     *\n     * @param ${className} ${functionName}\n     * @return 结果\n     */\n#if($table.sub)\n    @Transactional\n#end\n    @Override\n    public int update${ClassName}(${ClassName} ${className})\n    {\n#foreach ($column in $columns)\n#if($column.javaField == \'updateTime\')\n        ${className}.setUpdateTime(DateUtils.getNowDate());\n        String loginUsername = SecurityUtils.getUsername();\n        ${className}.setCreateBy(loginUsername);\n        ${className}.setUpdateBy(loginUsername);\n#end\n#end\n#if($table.sub)\n        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}());\n        insert${subClassName}(${className});\n#end\n        return ${className}Mapper.update${ClassName}(${className});\n    }\n\n    /**\n     * 批量删除${functionName}\n     *\n     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键\n     * @return 结果\n     */\n#if($table.sub)\n    @Transactional\n#end\n    @Override\n    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s)\n    {\n#if($table.sub)\n        ${className}Mapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);\n#end\n        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s);\n    }\n\n    /**\n     * 删除${functionName}信息\n     *\n     * @param ${pkColumn.javaField} ${functionName}主键\n     * @return 结果\n     */\n#if($table.sub)\n    @Transactional\n#end\n    @Override\n    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField})\n    {\n#if($table.sub)\n        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});\n#end\n        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});\n    }\n#if($table.sub)\n\n    /**\n     * 新增${subTable.functionName}信息\n     *\n     * @param ${className} ${functionName}对象\n     */\n    public void insert${subClassName}(${ClassName} ${className})\n    {\n        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();\n        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();\n        if (StringUtils.isNotNull(${subclassName}List))\n        {\n            List<${subClassName}> list = new ArrayList<${subClassName}>();\n            for (${subClassName} ${subclassName} : ${subclassName}List)\n            {\n                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});\n                list.add(${subclassName});\n            }\n            if (list.size() > 0)\n            {\n                ${className}Mapper.batch${subClassName}(list);\n            }\n        }\n    }\n#end\n}\n',
        '2023-11-09 14:28:36', '2024-03-28 15:45:30', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (6, 'Mapper.xml', '${backendPath}/src/main/resources/mapper/${moduleName}/${ClassName}Mapper.xml', 'Mapper.xml',
        '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"${packageName}.mapper.${ClassName}Mapper\">\n    \n    <resultMap type=\"${ClassName}\" id=\"${ClassName}Result\">\n#foreach ($column in $columns)\n        <result property=\"${column.javaField}\"    column=\"${column.columnName}\"    />\n#end\n    </resultMap>\n#if($table.sub)\n\n    <resultMap id=\"${ClassName}${subClassName}Result\" type=\"${ClassName}\" extends=\"${ClassName}Result\">\n        <collection property=\"${subclassName}List\" notNullColumn=\"sub_${subTable.pkColumn.columnName}\" javaType=\"java.util.List\" resultMap=\"${subClassName}Result\" />\n    </resultMap>\n\n    <resultMap type=\"${subClassName}\" id=\"${subClassName}Result\">\n#foreach ($column in $subTable.columns)\n        <result property=\"${column.javaField}\"    column=\"sub_${column.columnName}\"    />\n#end\n    </resultMap>\n#end\n\n    <sql id=\"select${ClassName}Vo\">\n        select#foreach($column in $columns) $column.columnName#if($foreach.count != $columns.size()),#end#end from ${tableName}\n    </sql>\n\n    <select id=\"select${ClassName}List\" parameterType=\"${ClassName}\" resultMap=\"${ClassName}Result\">\n        <include refid=\"select${ClassName}Vo\"/>\n        <where>  \n#foreach($column in $columns)\n#set($queryType=$column.queryType)\n#set($javaField=$column.javaField)\n#set($javaType=$column.javaType)\n#set($columnName=$column.columnName)\n#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})\n#if($column.query)\n#if($column.queryType == \"EQ\")\n            <if test=\"$javaField != null #if($javaType == \'String\' ) and $javaField.trim() != \'\'#end\"> and $columnName = #{$javaField}</if>\n#elseif($queryType == \"NE\")\n            <if test=\"$javaField != null #if($javaType == \'String\' ) and $javaField.trim() != \'\'#end\"> and $columnName != #{$javaField}</if>\n#elseif($queryType == \"GT\")\n            <if test=\"$javaField != null #if($javaType == \'String\' ) and $javaField.trim() != \'\'#end\"> and $columnName &gt; #{$javaField}</if>\n#elseif($queryType == \"GTE\")\n            <if test=\"$javaField != null #if($javaType == \'String\' ) and $javaField.trim() != \'\'#end\"> and $columnName &gt;= #{$javaField}</if>\n#elseif($queryType == \"LT\")\n            <if test=\"$javaField != null #if($javaType == \'String\' ) and $javaField.trim() != \'\'#end\"> and $columnName &lt; #{$javaField}</if>\n#elseif($queryType == \"LTE\")\n            <if test=\"$javaField != null #if($javaType == \'String\' ) and $javaField.trim() != \'\'#end\"> and $columnName &lt;= #{$javaField}</if>\n#elseif($queryType == \"LIKE\")\n            <if test=\"$javaField != null #if($javaType == \'String\' ) and $javaField.trim() != \'\'#end\"> and $columnName like concat(\'%\', #{$javaField}, \'%\')</if>\n#elseif($queryType == \"BETWEEN\")\n            <if test=\"params.begin$AttrName != null and params.begin$AttrName != \'\' and params.end$AttrName != null and params.end$AttrName != \'\'\"> and $columnName between #{params.begin$AttrName} and #{params.end$AttrName}</if>\n#end\n#end\n#end\n        </where>\n    </select>\n    \n    <select id=\"select${ClassName}By${pkColumn.capJavaField}\" parameterType=\"${pkColumn.javaType}\" resultMap=\"#if($table.sub)${ClassName}${subClassName}Result#else${ClassName}Result#end\">\n#if($table.crud || $table.tree)\n        <include refid=\"select${ClassName}Vo\"/>\n        where ${pkColumn.columnName} = #{${pkColumn.javaField}}\n#elseif($table.sub)\n        select#foreach($column in $columns) a.$column.columnName#if($foreach.count != $columns.size()),#end#end,\n           #foreach($column in $subTable.columns) b.$column.columnName as sub_$column.columnName#if($foreach.count != $subTable.columns.size()),#end#end\n\n        from ${tableName} a\n        left join ${subTableName} b on b.${subTableFkName} = a.${pkColumn.columnName}\n        where a.${pkColumn.columnName} = #{${pkColumn.javaField}}\n#end\n    </select>\n        \n    <insert id=\"insert${ClassName}\" parameterType=\"${ClassName}\"#if($pkColumn.increment) useGeneratedKeys=\"true\" keyProperty=\"$pkColumn.javaField\"#end>\n        insert into ${tableName}\n        <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">\n#foreach($column in $columns)\n#if($column.columnName != $pkColumn.columnName || !$pkColumn.increment)\n            <if test=\"$column.javaField != null#if($column.javaType == \'String\' && $column.required) and $column.javaField != \'\'#end\">$column.columnName,</if>\n#end\n#end\n         </trim>\n        <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">\n#foreach($column in $columns)\n#if($column.columnName != $pkColumn.columnName || !$pkColumn.increment)\n            <if test=\"$column.javaField != null#if($column.javaType == \'String\' && $column.required) and $column.javaField != \'\'#end\">#{$column.javaField},</if>\n#end\n#end\n         </trim>\n    </insert>\n\n    <update id=\"update${ClassName}\" parameterType=\"${ClassName}\">\n        update ${tableName}\n        <trim prefix=\"SET\" suffixOverrides=\",\">\n#foreach($column in $columns)\n#if($column.columnName != $pkColumn.columnName)\n            <if test=\"$column.javaField != null#if($column.javaType == \'String\' && $column.required) and $column.javaField != \'\'#end\">$column.columnName = #{$column.javaField},</if>\n#end\n#end\n        </trim>\n        where ${pkColumn.columnName} = #{${pkColumn.javaField}}\n    </update>\n\n    <delete id=\"delete${ClassName}By${pkColumn.capJavaField}\" parameterType=\"${pkColumn.javaType}\">\n        delete from ${tableName} where ${pkColumn.columnName} = #{${pkColumn.javaField}}\n    </delete>\n\n    <delete id=\"delete${ClassName}By${pkColumn.capJavaField}s\" parameterType=\"String\">\n        delete from ${tableName} where ${pkColumn.columnName} in \n        <foreach item=\"${pkColumn.javaField}\" collection=\"array\" open=\"(\" separator=\",\" close=\")\">\n            #{${pkColumn.javaField}}\n        </foreach>\n    </delete>\n#if($table.sub)\n    \n    <delete id=\"delete${subClassName}By${subTableFkClassName}s\" parameterType=\"String\">\n        delete from ${subTableName} where ${subTableFkName} in \n        <foreach item=\"${subTableFkclassName}\" collection=\"array\" open=\"(\" separator=\",\" close=\")\">\n            #{${subTableFkclassName}}\n        </foreach>\n    </delete>\n\n    <delete id=\"delete${subClassName}By${subTableFkClassName}\" parameterType=\"${pkColumn.javaType}\">\n        delete from ${subTableName} where ${subTableFkName} = #{${subTableFkclassName}}\n    </delete>\n\n    <insert id=\"batch${subClassName}\">\n        insert into ${subTableName}(#foreach($column in $subTable.columns) $column.columnName#if($foreach.count != $subTable.columns.size()),#end#end) values\n		<foreach item=\"item\" index=\"index\" collection=\"list\" separator=\",\">\n            (#foreach($column in $subTable.columns) #{item.$column.javaField}#if($foreach.count != $subTable.columns.size()),#end#end)\n        </foreach>\n    </insert>\n#end\n</mapper>',
        '2023-11-09 14:29:42', '2023-11-10 11:11:53', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (7, 'SQL', '${backendPath}/${className}.sql', 'SQL',
        '-- 菜单 SQL\ninsert into sys_menu (menu_name, parent_id, order_num, path, component, is_frame, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues(\'${functionName}\', \'${parentMenuId}\', \'1\', \'${businessName}\', \'${moduleName}/${businessName}/index\', 1, \'C\', \'0\', \'0\', \'${permissionPrefix}:list\', \'#\', \'admin\', \'2018-03-01\', \'twelvet\', \'2018-03-01\', \'${functionName}菜单\');\n\n-- 按钮父菜单ID\nSELECT @parentId := LAST_INSERT_ID();\n\n-- 按钮 SQL\ninsert into sys_menu (menu_name, parent_id, order_num, path, component, is_frame, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues(\'${functionName}查询\', @parentId, \'1\',  \'#\', \'\', 1, \'F\', \'0\', \'0\', \'${permissionPrefix}:query\',        \'#\', \'admin\', \'2018-03-01\', \'admin\', \'2018-03-01\', \'\');\n\ninsert into sys_menu (menu_name, parent_id, order_num, path, component, is_frame, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues(\'${functionName}新增\', @parentId, \'2\',  \'#\', \'\', 1, \'F\', \'0\', \'0\', \'${permissionPrefix}:add\',          \'#\', \'admin\', \'2018-03-01\', \'admin\', \'2018-03-01\', \'\');\n\ninsert into sys_menu (menu_name, parent_id, order_num, path, component, is_frame, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues(\'${functionName}修改\', @parentId, \'3\',  \'#\', \'\', 1, \'F\', \'0\', \'0\', \'${permissionPrefix}:edit\',         \'#\', \'admin\', \'2018-03-01\', \'admin\', \'2018-03-01\', \'\');\n\ninsert into sys_menu (menu_name, parent_id, order_num, path, component, is_frame, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues(\'${functionName}删除\', @parentId, \'4\',  \'#\', \'\', 1, \'F\', \'0\', \'0\', \'${permissionPrefix}:remove\',       \'#\', \'admin\', \'2018-03-01\', \'admin\', \'2018-03-01\', \'\');\n\ninsert into sys_menu (menu_name, parent_id, order_num, path, component, is_frame, menu_type, visible, status, perms, icon, create_by, create_time, update_by, update_time, remark)\nvalues(\'${functionName}导出\', @parentId, \'5\',  \'#\', \'\', 1, \'F\', \'0\', \'0\', \'${permissionPrefix}:export\',       \'#\', \'admin\', \'2018-03-01\', \'admin\', \'2018-03-01\', \'\');\n',
        '2023-11-09 14:33:56', '2023-11-10 11:13:07', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (8, '实体', '${backendPath}/src/main/java/${packagePath}/domain/${ClassName}.java', '实体',
        'package ${packageName}.domain;\n\n#foreach ($import in $importList)\nimport ${import};\n#end\nimport com.alibaba.excel.annotation.ExcelProperty;\nimport com.twelvet.framework.core.application.domain.BaseEntity;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.apache.commons.lang3.builder.ToStringStyle;\n\nimport io.swagger.v3.oas.annotations.media.Schema;\n#if($table.crud || $table.sub)\n#elseif($table.tree)\nimport com.twelvet.framework.jdbc.web.domain.TreeEntity;\n#end\n\n/**\n * ${functionName}对象 ${tableName}\n *\n * @author ${author}\n * @WebSite twelvet.cn\n * @date ${datetime}\n */\n#if($table.crud || $table.sub)\n#set($Entity=\"BaseEntity\")\n#elseif($table.tree)\n#set($Entity=\"TreeEntity\")\n#end\n@Schema(description =\"${functionName}对象\")\npublic class ${ClassName} extends ${Entity} {\n\n    private static final long serialVersionUID = 1L;\n\n#foreach ($column in $columns)\n    #if(!$table.isSuperColumn($column.javaField))\n    /** $column.columnComment */\n    @Schema(description = \"$column.columnComment\")\n        #if($column.list)\n            #set($parentheseIndex=$column.columnComment.indexOf(\"（\"))\n            #if($parentheseIndex != -1)\n                #set($comment=$column.columnComment.substring(0, $parentheseIndex))\n            #else\n                #set($comment=$column.columnComment)\n            #end\n            #if($parentheseIndex != -1)\n    @ExcelProperty(value =\"${comment}($column.readConverterExp())\")\n            #elseif($column.javaType == \'Date\')\n    @JsonFormat(pattern = \"yyyy-MM-dd\")\n    @ExcelProperty(value =\"${comment}\", width = 30, dateFormat = \"yyyy-MM-dd\")\n            #else\n    @ExcelProperty(value =\"${comment}\")\n            #end\n        #end\n    private $column.javaType $column.javaField;\n\n    #end\n#end\n#if($table.sub)\n    /** $table.subTable.functionName信息 */\n    private List<${subClassName}> ${subclassName}List;\n\n#end\n#foreach ($column in $columns)\n#if(!$table.isSuperColumn($column.javaField))\n#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches(\"[A-Z]\"))\n#set($AttrName=$column.javaField)\n#else\n#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})\n#end\n    public void set${AttrName}($column.javaType $column.javaField)\n    {\n        this.$column.javaField = $column.javaField;\n    }\n\n    public $column.javaType get${AttrName}()\n    {\n        return $column.javaField;\n    }\n#end\n#end\n\n#if($table.sub)\n    public List<${subClassName}> get${subClassName}List()\n    {\n        return ${subclassName}List;\n    }\n\n    public void set${subClassName}List(List<${subClassName}> ${subclassName}List)\n    {\n        this.${subclassName}List = ${subclassName}List;\n    }\n\n#end\n    @Override\n    public String toString() {\n        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)\n#foreach ($column in $columns)\n#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches(\"[A-Z]\"))\n#set($AttrName=$column.javaField)\n#else\n#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})\n#end\n            .append(\"${column.javaField}\", get${AttrName}())\n#end\n#if($table.sub)\n            .append(\"${subclassName}List\", get${subClassName}List())\n#end\n            .toString();\n    }\n}\n',
        '2023-11-09 14:52:04', '2023-11-10 16:18:52', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (9, 'React页面', '${frontendPath}/react/pages/${moduleName}/${businessName}/index.tsx', 'React页面',
        'import React, {useState, useRef} from \'react\'\nimport { useIntl } from \'@umijs/max\'\nimport {PageContainer, ProTable} from \'@ant-design/pro-components\'\nimport type {ActionType, ProColumns} from \'@ant-design/pro-components\'\nimport {\n    DeleteOutlined,\n    FundProjectionScreenOutlined,\n    PlusOutlined,\n    EditOutlined,\n    CloseOutlined\n} from \'@ant-design/icons\'\nimport {Popconfirm, Button, message, Modal, Form, Input, Space, Divider} from \'antd\'\nimport {FormInstance} from \'antd/lib/form\'\n#foreach($column in $columns)\n    #if($column.htmlType == \"select\")\n    import DictionariesSelect from \'@/components/TwelveT/Dictionaries/DictionariesSelect/Index\'\n        #break\n    #end\n#end\n#foreach($column in $columns)\n    #if($column.htmlType == \"radio\")\n    import DictionariesRadio from \'@/components/TwelveT/Dictionaries/DictionariesRadio/Index\'\n        #break\n    #end\n#end\n#foreach($column in $columns)\n    #if($column.htmlType == \"checkbox\")\n    import DictionariesCheckbox from \'@/components/TwelveT/Dictionaries/DictionariesCheckbox/Index\'\n        #break\n    #end\n#end\nimport {\n    pageQuery${BusinessName},\n    get${BusinessName},\n    del${BusinessName},\n    add${BusinessName},\n    update${BusinessName},\n    export${BusinessName}\n} from \'./service\'\nimport {system} from \'@/utils/twelvet\'\nimport {isArray} from \'lodash\'\n#set($importTwT = false)\n#foreach($column in $columns)\n    #if($column.htmlType == \"imageUpload\" || $column.htmlType == \"fileUpload\")\n        #set($importTwT = true)\n    import UploadTWT from \'@/components/TwelveT/Upload\'\n        #break\n    #end\n#end\n#if($importTwT)\nimport TWT, {proTableConfigs} from \'@/setting\'\n#else\nimport {proTableConfigs} from \'@/setting\'\n#end\n\n#foreach($column in $columns)\n    #if($column.htmlType == \"datetime\")\n    import DatePickerTWT from \'@/components/TwelveT/DatePicker/Index\'\n    import moment from \'moment\'\n        #break\n    #end\n#end\n\n#if($table.sub)\nimport {EditableProTable} from \'@ant-design/pro-components\'\n#end\n/**\n * ${functionName}模块\n */\nconst ${BusinessName}: React.FC = () => {\n  \n    const {formatMessage} = useIntl()\n\n    const [state] = useState<{\n        pageSize: number\n    }>({\n        pageSize: 10,\n    });\n\n    // 显示Modal\n    const [modal, setModal] = useState<{ title: string, visible: boolean }>({title: ``, visible: false})\n\n    // 是否执行Modal数据操作中\n    const [loadingModal, setLoadingModal] = useState<boolean>(false)\n\n    const acForm = useRef<ActionType>()\n\n    const formRef = useRef<FormInstance>()\n\n    const [form] = Form.useForm()\n\n    const formItemLayout = {\n        labelCol: {\n            xs: {span: 4},\n            sm: {span: 4},\n        },\n        wrapperCol: {\n            xs: {span: 18},\n            sm: {span: 18},\n        },\n    }\n\n    #if($table.sub)\n\n        const [tableForm] = Form.useForm<FormInstance>()\n        const [dataSource, setDataSource] = useState<[]>([])\n\n        const columnsEdit: ProColumns = [\n            #foreach($column in $subTable.columns)\n                #set($javaField=$column.javaField)\n                #set($parentheseIndex=$column.columnComment.indexOf(\"（\"))\n                #if($parentheseIndex != -1)\n                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))\n                #else\n                    #set($comment=$column.columnComment)\n                #end\n                #if($column.pk)\n                #else\n                    {\n                        title: \'${comment}\', ellipsis: true, width: 100, valueType: \"text\", dataIndex: \'${javaField}\',\n                    },\n                #end\n            #end\n            {\n                title: \'操作\', fixed: \'right\', width: 80, valueType: \"option\", dataIndex: \'operation\'\n            },\n        ]\n    #end\n\n    /**\n     * 新增${functionName}数据\n     * @param row row\n     */\n    const refPost = async () => {\n        setModal({title: formatMessage({id: \'system.add\'}), visible: true})\n    }\n\n    /**\n     * 获取修改${functionName}信息\n     * @param row row\n     */\n    const refPut = async (row: { [key: string]: any }) => {\n        try {\n            const {code, msg, data} = await get${BusinessName}(row.${pkColumn.javaField})\n            if (code !== 200) {\n                return message.error(msg)\n            }\n\n            #if($table.sub)\n                setDataSource(data.${subclassName}List)\n            #end\n\n            // 赋值表单数据\n            form.setFieldsValue(data)\n\n            // 设置Modal状态\n            setModal({title: formatMessage({id: \'system.update\'}), visible: true})\n\n        } catch (e) {\n            system.error(e)\n        }\n    }\n\n    /**\n     * 移除${functionName}数据\n     * @param row ${pkColumn.javaField}\n     */\n    const refRemove = async (${pkColumn.javaField}: (string | number)[] | string | undefined) => {\n        try {\n            if (!${pkColumn.javaField}) {\n                return true\n            }\n\n            let params\n            if (isArray(${pkColumn.javaField})) {\n                params = ${pkColumn.javaField}.join(\",\")\n            } else {\n                params = ${pkColumn.javaField}\n            }\n\n            const {code, msg} = await del${BusinessName}(params)\n\n            if (code !== 200) {\n                return message.error(msg)\n            }\n\n            message.success(msg)\n\n            acForm?.current?.reload()\n\n        } catch (e) {\n            system.error(e)\n        }\n\n    }\n\n    /**\n     * 取消Modal的显示\n     */\n    const handleCancel = () => {\n        setModal({title: \"\", visible: false})\n\n        form.resetFields()\n\n    }\n\n    /**\n     * 保存${functionName}数据\n     */\n    const onSave = () => {\n        form\n            .validateFields()\n            .then(\n                async (fields) => {\n                    try {\n                        // 开启加载中\n                        setLoadingModal(true)\n\n                        #if($table.sub)\n                            fields.${subclassName}List = dataSource\n                        #end\n\n                        // ID为0则insert，否则将update\n                        const {\n                            code,\n                            msg\n                        } = fields.${pkColumn.javaField} === 0 ? await add${BusinessName}(fields) : await update${BusinessName}(fields)\n                        if (code !== 200) {\n                            return message.error(msg)\n                        }\n\n                        message.success(msg)\n\n                        if (acForm.current) {\n                            acForm.current.reload()\n                        }\n\n                        // 关闭模态框\n                        handleCancel()\n                    } catch (e) {\n                        system.error(e)\n                    } finally {\n                        setLoadingModal(false)\n                    }\n                }).catch(e => {\n            system.error(e)\n        })\n    }\n\n    // Form参数\n    const columns: ProColumns<any>[] = [\n        #foreach($column in $columns)\n            #set($javaField=$column.javaField)\n            #set($parentheseIndex=$column.columnComment.indexOf(\"（\"))\n            #if($parentheseIndex != -1)\n                #set($comment=$column.columnComment.substring(0, $parentheseIndex))\n            #else\n                #set($comment=$column.columnComment)\n            #end\n            #if($column.pk)\n            #elseif($column.list && $column.htmlType == \"datetime\")\n                {\n                    title: \'${comment}\', ellipsis: true, width: 200, valueType: \"dateTime\", dataIndex: \'${javaField}\',\n                },\n            #elseif($column.list && \"\" != $javaField)\n                {\n                    title: \'${comment}\', ellipsis: true, width: 200, valueType: \"text\", dataIndex: \'${javaField}\',\n                },\n            #end\n        #end\n        {\n            title: \'操作\',\n            fixed: \'right\',\n            width: 320,\n            valueType: \"option\",\n            dataIndex: \'operation\',\n            render: (_, row) => {\n                return (\n                    <>\n                        <a onClick={() => refPut(row)}>\n                            <Space>\n                                <EditOutlined/>\n                                {useIntl().formatMessage({id: \'system.update\'})}\n                            </Space>\n                        </a>\n\n                        <Divider type=\"vertical\"/>\n\n                        <Popconfirm\n                            onConfirm={() => refRemove(row.${pkColumn.javaField})}\n                            title=\"确定删除吗\"\n                        >\n                            <a href=\'#\'>\n                                <Space>\n                                    <CloseOutlined/>\n                                    {useIntl().formatMessage({id: \'system.delete\'})}\n                                </Space>\n                            </a>\n                        </Popconfirm>\n                    </>\n                )\n            }\n        },\n    ]\n\n    return (\n        <PageContainer>\n            <ProTable\n                {...proTableConfigs}\n                pagination={{\n                    // 是否允许每页大小更改\n                    showSizeChanger: true,\n                    // 每页显示条数\n                    defaultPageSize: state.pageSize,\n                }}\n                actionRef={acForm}\n                formRef={formRef}\n                rowKey=\"${pkColumn.javaField}\"\n                columns={columns}\n                request={async (params) => {\n                    const {data} = await pageQuery${BusinessName}(params);\n                    const {records, total} = data;\n                    return Promise.resolve({\n                        data: records,\n                        success: true,\n                        total,\n                    });\n                }}\n                rowSelection={{}}\n                toolBarRender={(action, {selectedRowKeys}) => [\n                    <Button key=\'add\' type=\"default\" onClick={refPost}>\n                        <PlusOutlined/>\n                        {useIntl().formatMessage({id: \'system.add\'})}\n                    </Button>,\n                    <Popconfirm\n                        key=\'batchDelete\'\n                        disabled={!(selectedRowKeys && selectedRowKeys.length > 0)}\n                        onConfirm={() => refRemove(selectedRowKeys)}\n                        title=\"是否删除选中数据\"\n                    >\n                        <Button\n                            disabled={!(selectedRowKeys && selectedRowKeys.length > 0)}\n                            type=\"primary\" danger\n                        >\n                            <DeleteOutlined/>\n                            {useIntl().formatMessage({id: \'system.delete.batch\'})}\n                        </Button>\n                    </Popconfirm>,\n                    <Popconfirm\n                        key=\'export\'\n                        title=\"是否导出数据\"\n                        onConfirm={() => {\n                            export${BusinessName}({\n                                ...formRef.current?.getFieldsValue()\n                            })\n                        }}\n                    >\n                        <Button type=\"default\">\n                            <FundProjectionScreenOutlined/>\n                            {useIntl().formatMessage({id: \'system.export\'})}\n                        </Button>\n                    </Popconfirm>\n                ]}\n\n            />\n\n            <Modal\n                title={`${modal.title}${functionName}`}\n                open={modal.visible}\n                okText={`${modal.title}`}\n                confirmLoading={loadingModal}\n                onOk={onSave}\n                onCancel={handleCancel}\n                // 销毁组件，要求重新装载\n                destroyOnClose\n            >\n\n                <Form\n                    form={form}\n                >\n                    <Form.Item\n                        hidden\n                        {...formItemLayout}\n                        label=\"主键\"\n                        name=\"${pkColumn.javaField}\"\n                        initialValue={0}\n                    >\n                        <Input/>\n                    </Form.Item>\n                    #foreach($column in $columns)\n                        #set($field=$column.javaField)\n                        #if($column.insert && !$column.pk)\n                            #if(($column.usableColumn) || (!$column.superColumn))\n                                #if($column.isRequired)\n                                    #set($isRequired=true)\n                                #else\n                                    #set($isRequired=false)\n                                #end\n\n                                #set($parentheseIndex=$column.columnComment.indexOf(\"（\"))\n                                #if($parentheseIndex != -1)\n                                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))\n                                #else\n                                    #set($comment=$column.columnComment)\n                                #end\n                                #set($dictType=$column.dictType)\n                                #if($column.htmlType == \"input\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <Input/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"imageUpload\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'请上传${comment}\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <UploadTWT\n                                            name=\'file\'\n                                            maxCount={1}\n                                            // 开启图片剪裁\n                                            imgCrop={true}\n                                            action={TWT.uploadUrl}\n                                        />\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"fileUpload\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'请上传${comment}\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <UploadTWT\n                                            name=\'file\'\n                                            maxCount={1}\n                                            listType={\'picture\'}\n                                            action={TWT.uploadUrl}\n                                            title={<Button> 上传文件</Button>}\n                                        />\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"editor\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <Upload\n                                            name=\'file\'\n                                            headers={{\n                                                Authorization: `Bearer ${token.access_token}`\n                                            }}\n                                            maxCount={1}\n                                        >\n                                            <Button>上传文件</Button>\n                                        </Upload>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"select\" && $dictType)\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <DictionariesSelect type=\'${dictType}\'/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"checkbox\" && $dictType)\n                                    <Form.Item\n                                        // 格式数组\n                                        getValueFromEvent={(value) => {\n                                            return value.join(\',\')\n                                        }}\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <DictionariesCheckbox type=\'${dictType}\'/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"radio\" && $dictType)\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        name=\"${field}\"\n                                    >\n                                        <DictionariesRadio type=\'${dictType}\'/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"datetime\")\n                                    <Form.Item\n                                        // 格式化时间\n                                        getValueFromEvent={(date) => {\n                                            return moment(date).valueOf()\n                                        }}\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <DatePickerTWT showTime/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"textarea\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <Input.TextArea/>\n                                    </Form.Item>\n                                #end\n                            #end\n                        #end\n                    #end\n\n                </Form>\n\n                #if($table.sub)\n                    <Divider>${subTable.functionName}信息</Divider>\n\n                    <EditableProTable\n                        scroll={{x: \'x-content\'}}\n                        columns={columnsEdit}\n                        rowKey=\"id\"\n                        recordCreatorProps={{\n                            newRecordType: \'dataSource\',\n                            record: () => ({\n                                id: Date.now(),\n                            }),\n                        }}\n                        editable={{\n                            form: tableForm,\n                            type: \'multiple\',\n                            actionRender: (row, config, defaultDoms) => {\n                                return [defaultDoms.delete];\n                            },\n                            onValuesChange: (record, recordList: any) => {\n                                setDataSource(recordList);\n                            },\n                        }}\n                    />\n                #end\n\n            </Modal>\n        </PageContainer>\n    )\n\n}\n\nexport default ${BusinessName}\n',
        '2023-11-09 15:01:11', '2024-04-03 09:36:34', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (10, 'React 请求API', '${frontendPath}/react/pages/${moduleName}/${businessName}/service.ts', 'React 请求API',
        'import {request} from \'@umijs/max\'\nimport {download} from \'@/utils/twelvet\'\n\n// 请求的控制器名称\nconst controller = \"/${moduleName}/${businessName}\";\n\n/**\n * 查询${functionName}列表\n * @param query 查询参数\n */\nexport async function pageQuery${BusinessName}(query: { [key: string]: any }) {\n    return request(`${controller}/pageQuery`, {\n        method: `get`,\n        params: query\n    })\n}\n\n/**\n * 查询${functionName}详细\n * @param 主键\n */\nexport async function get${BusinessName}(${pkColumn.javaField}: string | number) {\n    return request(`${controller}/${${pkColumn.javaField}}`, {\n        method: `get`\n    })\n}\n\n/**\n * 新增${functionName}\n * @param data 数据参数\n */\nexport async function add${BusinessName}(data: { [key: string]: any }) {\n    return request(`${controller}`, {\n        method: `post`,\n        data: data\n    })\n}\n\n/**\n * 修改${functionName}\n * @param data 数据参数\n */\nexport async function update${BusinessName}(data: { [key: string]: any }) {\n    return request(`${controller}`, {\n        method: `put`,\n        data: data\n    })\n}\n\n/**\n * 删除${functionName}\n * @param 主键\n */\nexport async function del${BusinessName}(${pkColumn.javaField}: string | number) {\n    return request(`${controller}/${${pkColumn.javaField}}`, {\n        method: `delete`\n    })\n}\n\n/**\n * 导出数据\n * @param params\n */\nexport async function export${BusinessName}(params?: { [key: string]: any }) {\n    return download(`${controller}/export`, params);\n}',
        '2023-11-09 15:01:40', '2023-11-09 15:02:09', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (11, 'index-tree', '${frontendPath}/react/pages/${moduleName}/${businessName}/index.tsx', '树形模板',
        'import React, {useState, useRef} from \'react\'\nimport { useIntl } from \'@umijs/max\'\nimport {PageContainer, ProTable} from \'@ant-design/pro-components\'\nimport type {ActionType, ProColumns} from \'@ant-design/pro-components\'\nimport {\n    DeleteOutlined,\n    FundProjectionScreenOutlined,\n    PlusOutlined,\n    EditOutlined,\n    CloseOutlined\n} from \'@ant-design/icons\'\nimport {Popconfirm, Button, message, Modal, Form, Input, Space, Divider, TreeSelect} from \'antd\'\nimport {FormInstance} from \'antd/lib/form\'\n#foreach($column in $columns)\n    #if($column.htmlType == \"select\")\n    import DictionariesSelect from \'@/components/TwelveT/Dictionaries/DictionariesSelect/Index\'\n        #break\n    #end\n#end\n#foreach($column in $columns)\n    #if($column.htmlType == \"radio\")\n    import DictionariesRadio from \'@/components/TwelveT/Dictionaries/DictionariesRadio/Index\'\n        #break\n    #end\n#end\n#foreach($column in $columns)\n    #if($column.htmlType == \"checkbox\")\n    import DictionariesCheckbox from \'@/components/TwelveT/Dictionaries/DictionariesCheckbox/Index\'\n        #break\n    #end\n#end\nimport {\n    pageQuery${BusinessName},\n    get${BusinessName},\n    del${BusinessName},\n    add${BusinessName},\n    update${BusinessName},\n    export${BusinessName}\n} from \'./service\'\nimport {makeTree, system} from \'@/utils/twelvet\'\nimport {isArray} from \'lodash\'\n#set($importTwT = false)\n#foreach($column in $columns)\n    #if($column.htmlType == \"imageUpload\" || $column.htmlType == \"fileUpload\")\n        #set($importTwT = true)\n    import UploadTWT from \'@/components/TwelveT/Upload\'\n        #break\n    #end\n#end\n#if($importTwT)\nimport TWT, {proTableConfigs} from \'@/setting\'\n#else\nimport {proTableConfigs} from \'@/setting\'\n#end\n#foreach($column in $columns)\n    #if($column.htmlType == \"datetime\")\n    import DatePickerTWT from \'@/components/TwelveT/DatePicker/Index\'\n    import moment from \'moment\'\n        #break\n    #end\n#end\n#if($table.sub)\nimport {EditableProTable} from \'@ant-design/pro-components\'\n#end\n\n/**\n * ${functionName}模块\n */\nconst ${BusinessName}: React.FC = () => {\n\n    const {formatMessage} = useIntl()\n\n    const [state] = useState<{\n        pageSize: number\n    }>({\n        pageSize: 10,\n    });\n\n    // 显示Modal\n    const [modal, setModal] = useState<{ title: string, visible: boolean }>({title: ``, visible: false})\n\n    // 是否执行Modal数据操作中\n    const [loadingModal, setLoadingModal] = useState<boolean>(false)\n\n    const acForm = useRef<ActionType>()\n\n    const formRef = useRef<FormInstance>()\n\n    const [form] = Form.useForm()\n\n    const formItemLayout = {\n        labelCol: {\n            xs: {span: 4},\n            sm: {span: 4},\n        },\n        wrapperCol: {\n            xs: {span: 18},\n            sm: {span: 18},\n        },\n    }\n\n    const [${businessName}Options, set${BusinessName}Options] = useState<any[]>()\n\n    #if($table.sub)\n\n        const [tableForm] = Form.useForm<FormInstance>()\n        const [dataSource, setDataSource] = useState<[]>([])\n\n        const columnsEdit: ProColumns = [\n            #foreach($column in $subTable.columns)\n                #set($javaField=$column.javaField)\n                #set($parentheseIndex=$column.columnComment.indexOf(\"（\"))\n                #if($parentheseIndex != -1)\n                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))\n                #else\n                    #set($comment=$column.columnComment)\n                #end\n                #if($column.pk)\n                #else\n                    {\n                        title: \'${comment}\', ellipsis: true, width: 100, valueType: \"text\", dataIndex: \'${javaField}\',\n                    },\n                #end\n            #end\n            {\n                title: \'操作\', fixed: \'right\', width: 80, valueType: \"option\", dataIndex: \'operation\'\n            },\n        ]\n    #end\n\n    /** 查询下拉树结构 */\n    const getTreeselect = async () => {\n\n        try {\n            const {code, msg, data} = await list${BusinessName}({})\n            if (code !== 200) {\n                return message.error(msg)\n            }\n\n            const tree = [{\n                key: 0,\n                title: \'顶级节点\',\n                value: 0,\n                children: makeTree({\n                    dataSource: data.records,\n                    id: `${treeCode}`,\n                    parentId: \'${treeParentCode}\',\n                    rootId: false,\n                    enhance: {\n                        key: `${treeCode}`,\n                        title: `${treeCode}`,\n                        value: `${treeCode}`\n                    }\n                })\n            }]\n            set${BusinessName}Options(tree)\n        } catch (e) {\n            system.error(e)\n        }\n    }\n\n    /**\n     * 新增${functionName}数据\n     * @param row row\n     */\n    const refPost = async () => {\n        setModal({title: formatMessage({id: \'system.add\'}), visible: true})\n        getTreeselect()\n    }\n\n    /**\n     * 获取修改${functionName}信息\n     * @param row row\n     */\n    const refPut = async (row: { [key: string]: any }) => {\n        try {\n            const {code, msg, data} = await get${BusinessName}(row.${pkColumn.javaField})\n            if (code !== 200) {\n                return message.error(msg)\n            }\n\n            #if($table.sub)\n                setDataSource(data.${subclassName}List)\n            #end\n\n            // 赋值表单数据\n            form.setFieldsValue(data)\n\n            getTreeselect()\n\n            // 设置Modal状态\n            setModal({title: formatMessage({id: \'system.update\'}), visible: true})\n\n        } catch (e) {\n            system.error(e)\n        }\n    }\n\n    /**\n     * 移除${functionName}数据\n     * @param row ${pkColumn.javaField}\n     */\n    const refRemove = async (${pkColumn.javaField}: (string | number)[] | string | undefined) => {\n        try {\n            if (!${pkColumn.javaField}) {\n                return true\n            }\n\n            let params\n            if (isArray(${pkColumn.javaField})) {\n                params = ${pkColumn.javaField}.join(\",\")\n            } else {\n                params = ${pkColumn.javaField}\n            }\n\n            const {code, msg} = await del${BusinessName}(params)\n\n            if (code !== 200) {\n                return message.error(msg)\n            }\n\n            message.success(msg)\n\n            acForm?.current?.reload()\n\n        } catch (e) {\n            system.error(e)\n        }\n\n    }\n\n    /**\n     * 取消Modal的显示\n     */\n    const handleCancel = () => {\n        setModal({title: \"\", visible: false})\n\n        form.resetFields()\n\n    }\n\n    /**\n     * 保存${functionName}数据\n     */\n    const onSave = () => {\n        form\n            .validateFields()\n            .then(\n                async (fields) => {\n                    try {\n                        // 开启加载中\n                        setLoadingModal(true)\n\n                        #if($table.sub)\n                            fields.${subclassName}List = dataSource\n                        #end\n\n                        // ID为0则insert，否则将update\n                        const {\n                            code,\n                            msg\n                        } = fields.${pkColumn.javaField} === 0 ? await add${BusinessName}(fields) : await update${BusinessName}(fields)\n                        if (code !== 200) {\n                            return message.error(msg)\n                        }\n\n                        message.success(msg)\n\n                        if (acForm.current) {\n                            acForm.current.reload()\n                        }\n\n                        // 关闭模态框\n                        handleCancel()\n                    } catch (e) {\n                        system.error(e)\n                    } finally {\n                        setLoadingModal(false)\n                    }\n                }).catch(e => {\n            system.error(e)\n        })\n    }\n\n    // Form参数\n    const columns: ProColumns<any>[] = [\n        #foreach($column in $columns)\n            #set($javaField=$column.javaField)\n            #set($parentheseIndex=$column.columnComment.indexOf(\"（\"))\n            #if($parentheseIndex != -1)\n                #set($comment=$column.columnComment.substring(0, $parentheseIndex))\n            #else\n                #set($comment=$column.columnComment)\n            #end\n            #if($column.pk)\n            #elseif($column.list && $column.htmlType == \"datetime\")\n                {\n                    title: \'${comment}\', ellipsis: true, width: 200, valueType: \"dateTime\", dataIndex: \'${javaField}\',\n                },\n            #elseif($column.list && \"\" != $javaField)\n                {\n                    title: \'${comment}\', ellipsis: true, width: 200, valueType: \"text\", dataIndex: \'${javaField}\',\n                },\n            #end\n        #end\n        {\n            title: \'操作\',\n            fixed: \'right\',\n            width: 320,\n            valueType: \"option\",\n            dataIndex: \'operation\',\n            render: (_, row) => {\n                return (\n                    <>\n                        <a onClick={() => refPut(row)}>\n                            <Space>\n                                <EditOutlined/>\n                                {useIntl().formatMessage({id: \'system.update\'})}\n                            </Space>\n                        </a>\n\n                        <Divider type=\"vertical\"/>\n\n                        <Popconfirm\n                            onConfirm={() => refRemove(row.${pkColumn.javaField})}\n                            title=\"确定删除吗\"\n                        >\n                            <a href=\'#\'>\n                                <Space>\n                                    <CloseOutlined/>\n                                    {useIntl().formatMessage({id: \'system.delete\'})}\n                                </Space>\n                            </a>\n                        </Popconfirm>\n                    </>\n                )\n            }\n        },\n    ]\n\n    return (\n        <PageContainer>\n            <ProTable\n                {...proTableConfigs}\n                pagination={{\n                    // 是否允许每页大小更改\n                    showSizeChanger: true,\n                    // 每页显示条数\n                    defaultPageSize: state.pageSize,\n                }}\n                actionRef={acForm}\n                formRef={formRef}\n                rowKey=\"${pkColumn.javaField}\"\n                columns={columns}\n                request={async (params) => {\n                    const {data} = await list${BusinessName}(params);\n                    const {records, total} = data;\n                    return Promise.resolve({\n                        data: records,\n                        success: true,\n                        total,\n                    });\n                }}\n                rowSelection={{}}\n                toolBarRender={(action, {selectedRowKeys}) => [\n                    <Button key=\'add\' type=\"default\" onClick={refPost}>\n                        <PlusOutlined/>\n                        新增\n                    </Button>,\n                    <Popconfirm\n                        key=\'batchDelete\'\n                        disabled={!(selectedRowKeys && selectedRowKeys.length > 0)}\n                        onConfirm={() => refRemove(selectedRowKeys)}\n                        title=\"是否删除选中数据\"\n                    >\n                        <Button\n                            disabled={!(selectedRowKeys && selectedRowKeys.length > 0)}\n                            type=\"primary\" danger\n                        >\n                            <DeleteOutlined/>\n                            {useIntl().formatMessage({id: \'system.delete.batch\'})}\n                        </Button>\n                    </Popconfirm>,\n                    <Popconfirm\n                        key=\'export\'\n                        title=\"是否导出数据\"\n                        onConfirm={() => {\n                            export${BusinessName}({\n                                ...formRef.current?.getFieldsValue()\n                            })\n                        }}\n                    >\n                        <Button type=\"default\">\n                            <FundProjectionScreenOutlined/>\n                            {useIntl().formatMessage({id: \'system.export\'})}\n                        </Button>\n                    </Popconfirm>\n                ]}\n\n            />\n\n            <Modal\n                title={`${modal.title}${functionName}`}\n                open={modal.visible}\n                okText={`${modal.title}`}\n                confirmLoading={loadingModal}\n                onOk={onSave}\n                onCancel={handleCancel}\n                // 销毁组件，要求重新装载\n                destroyOnClose\n            >\n\n                <Form\n                    form={form}\n                >\n                    <Form.Item\n                        hidden\n                        {...formItemLayout}\n                        label=\"主键\"\n                        name=\"${pkColumn.javaField}\"\n                        initialValue={0}\n                    >\n                        <Input/>\n                    </Form.Item>\n                    #foreach($column in $columns)\n                        #set($field=$column.javaField)\n                        #if($column.insert && !$column.pk)\n                            #if(($column.usableColumn) || (!$column.superColumn))\n                                #if($column.isRequired)\n                                    #set($isRequired=true)\n                                #else\n                                    #set($isRequired=false)\n                                #end\n\n                                #set($parentheseIndex=$column.columnComment.indexOf(\"（\"))\n                                #if($parentheseIndex != -1)\n                                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))\n                                #else\n                                    #set($comment=$column.columnComment)\n                                #end\n                                #set($dictType=$column.dictType)\n                                #if(\"\" != $treeParentCode && $column.javaField == $treeParentCode)\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <TreeSelect\n                                            placeholder={\"请选择${comment}\"}\n                                            showSearch\n                                            treeLine\n                                            treeNodeFilterProp=\"title\"\n                                            treeData={${businessName}Options}\n                                        />\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"input\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <Input placeholder={\"请输入${comment}\"}/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"imageUpload\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'请上传${comment}\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <UploadTWT\n                                            name=\'file\'\n                                            maxCount={1}\n                                            // 开启图片剪裁\n                                            imgCrop={true}\n                                            action={TWT.uploadUrl}\n                                        />\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"fileUpload\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'请上传${comment}\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <UploadTWT\n                                            name=\'file\'\n                                            maxCount={1}\n                                            listType={\'picture\'}\n                                            action={TWT.uploadUrl}\n                                            title={<Button> 上传文件</Button>}\n                                        />\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"editor\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <Upload\n                                            name=\'file\'\n                                            headers={{\n                                                Authorization: `Bearer ${token.access_token}`\n                                            }}\n                                            maxCount={1}\n                                        >\n                                            <Button>上传文件</Button>\n                                        </Upload>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"select\" && $dictType)\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <DictionariesSelect type=\'${dictType}\' />\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"checkbox\" && $dictType)\n                                    <Form.Item\n                                        // 格式数组\n                                        getValueFromEvent={(value) => {\n                                            return value.join(\',\')\n                                        }}\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <DictionariesCheckbox type=\'${dictType}\'/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"radio\" && $dictType)\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        name=\"${field}\"\n                                    >\n                                        <DictionariesRadio type=\'${dictType}\'/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"datetime\")\n                                    <Form.Item\n                                        // 格式化时间\n                                        getValueFromEvent={(date) => {\n                                            return moment(date).valueOf()\n                                        }}\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <DatePickerTWT showTime/>\n                                    </Form.Item>\n                                #elseif($column.htmlType == \"textarea\")\n                                    <Form.Item\n                                        {...formItemLayout}\n                                        label=\"${comment}\"\n                                        rules={[{required: ${isRequired}, message: \'${comment}不能为空\'}]}\n                                        name=\"${field}\"\n                                    >\n                                        <Input.TextArea/>\n                                    </Form.Item>\n                                #end\n                            #end\n                        #end\n                    #end\n\n                </Form>\n\n            </Modal>\n        </PageContainer>\n    )\n\n}\n\nexport default ${BusinessName}\n',
        '2023-11-10 11:14:20', '2024-04-03 09:38:18', '0', 'admin', 'admin');
INSERT INTO `gen_template`
VALUES (12, 'sub-domain', '${backendPath}/src/main/java/${packagePath}/domain/${subClassName}.java', '链表实体',
        'package ${packageName}.domain;\n\n    #foreach ($import in $subImportList)\n    import ${import};\n    #end\nimport com.twelvet.framework.core.annotation.Excel;\nimport com.twelvet.framework.jdbc.web.domain.BaseEntity;\n\n/**\n * ${subTable.functionName}对象 ${subTableName}\n *\n * @author ${author}\n * @WebSite twelvet.cn\n * @date ${datetime}\n */\npublic class ${subClassName} extends BaseEntity\n{\n    private static final long serialVersionUID = 1L;\n\n#foreach ($column in $subTable.columns)\n#if(!$table.isSuperColumn($column.javaField))\n    /** $column.columnComment */\n#if($column.list)\n#set($parentheseIndex=$column.columnComment.indexOf(\"（\"))\n#if($parentheseIndex != -1)\n#set($comment=$column.columnComment.substring(0, $parentheseIndex))\n#else\n#set($comment=$column.columnComment)\n#end\n#if($parentheseIndex != -1)\n    @ExcelProperty(value =\"${comment}($column.readConverterExp())\")\n#elseif($column.javaType == \'Date\')\n    @JsonFormat(pattern = \"yyyy-MM-dd\")\n    @ExcelProperty(value =\"${comment}\", width = 30, dateFormat = \"yyyy-MM-dd\")\n#else\n    @ExcelProperty(value =\"${comment}\")\n#end\n#end\n    private $column.javaType $column.javaField;\n\n#end\n#end\n#foreach ($column in $subTable.columns)\n#if(!$table.isSuperColumn($column.javaField))\n#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches(\"[A-Z]\"))\n#set($AttrName=$column.javaField)\n#else\n#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})\n#end\n    public void set${AttrName}($column.javaType $column.javaField)\n    {\n        this.$column.javaField = $column.javaField;\n    }\n\n    public $column.javaType get${AttrName}()\n    {\n        return $column.javaField;\n    }\n#end\n#end\n\n    @Override\n    public String toString() {\n        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)\n#foreach ($column in $subTable.columns)\n#if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches(\"[A-Z]\"))\n#set($AttrName=$column.javaField)\n#else\n#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})\n#end\n            .append(\"${column.javaField}\", get${AttrName}())\n#end\n            .toString();\n    }\n}\n',
        '2023-11-10 11:14:47', '2023-11-10 16:06:53', '0', 'admin', 'admin');

-- ----------------------------
-- Table structure for gen_table
-- ----------------------------
DROP TABLE IF EXISTS `gen_table`;
CREATE TABLE `gen_table`
(
    `table_id`          bigint(20)                                               NOT NULL AUTO_INCREMENT COMMENT '编号',
    `ds_name`           varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci  NOT NULL COMMENT '数据源别名',
    `db_type`           varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci   NOT NULL COMMENT '数据源类型',
    `table_name`        varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL     DEFAULT '' COMMENT '表名称',
    `table_comment`     varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL     DEFAULT '' COMMENT '表描述',
    `sub_table_name`    varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci   NULL     DEFAULT NULL COMMENT '关联子表的表名',
    `sub_table_fk_name` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci   NULL     DEFAULT NULL COMMENT '子表关联的外键名',
    `class_name`        varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL     DEFAULT '' COMMENT '实体类名称',
    `tpl_group_id`      bigint(20)                                               NOT NULL DEFAULT 1 COMMENT '使用的模板分组ID',
    `package_name`      varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL     DEFAULT NULL COMMENT '生成包路径',
    `module_name`       varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci   NULL     DEFAULT NULL COMMENT '生成模块名',
    `business_name`     varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci   NULL     DEFAULT NULL COMMENT '生成业务名',
    `function_name`     varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci   NULL     DEFAULT NULL COMMENT '生成功能名',
    `function_author`   varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci   NULL     DEFAULT NULL COMMENT '生成功能作者',
    `gen_type`          char(1) CHARACTER SET utf8 COLLATE utf8_general_ci       NULL     DEFAULT '0' COMMENT '生成代码方式（0zip压缩包 1自定义路径）',
    `gen_path`          varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL     DEFAULT '/' COMMENT '生成路径（不填默认项目路径）',
    `options`           varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL     DEFAULT NULL COMMENT '其它生成选项',
    `create_by`         varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci   NULL     DEFAULT '' COMMENT '创建者',
    `create_time`       datetime                                                 NULL     DEFAULT NULL COMMENT '创建时间',
    `update_by`         varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci   NULL     DEFAULT '' COMMENT '更新者',
    `update_time`       datetime                                                 NULL     DEFAULT NULL COMMENT '更新时间',
    `remark`            varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL     DEFAULT NULL COMMENT '备注',
    PRIMARY KEY (`table_id`) USING BTREE
) ENGINE = InnoDB
  AUTO_INCREMENT = 1
  CHARACTER SET = utf8
  COLLATE = utf8_general_ci COMMENT = '代码生成业务表'
  ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of gen_table
-- ----------------------------

-- ----------------------------
-- Table structure for gen_table_column
-- ----------------------------
DROP TABLE IF EXISTS `gen_table_column`;
CREATE TABLE `gen_table_column`
(
    `column_id`      bigint(20)                                              NOT NULL AUTO_INCREMENT COMMENT '编号',
    `table_id`       varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL DEFAULT NULL COMMENT '归属表编号',
    `column_name`    varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '列名称',
    `column_comment` varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '列描述',
    `column_type`    varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '列类型',
    `java_type`      varchar(500) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'JAVA类型',
    `java_field`     varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'JAVA字段名',
    `is_pk`          char(1) CHARACTER SET utf8 COLLATE utf8_general_ci      NULL DEFAULT NULL COMMENT '是否主键（1是）',
    `is_increment`   char(1) CHARACTER SET utf8 COLLATE utf8_general_ci      NULL DEFAULT NULL COMMENT '是否自增（1是）',
    `is_required`    char(1) CHARACTER SET utf8 COLLATE utf8_general_ci      NULL DEFAULT NULL COMMENT '是否必填（1是）',
    `is_insert`      char(1) CHARACTER SET utf8 COLLATE utf8_general_ci      NULL DEFAULT NULL COMMENT '是否为插入字段（1是）',
    `is_edit`        char(1) CHARACTER SET utf8 COLLATE utf8_general_ci      NULL DEFAULT NULL COMMENT '是否编辑字段（1是）',
    `is_list`        char(1) CHARACTER SET utf8 COLLATE utf8_general_ci      NULL DEFAULT NULL COMMENT '是否列表字段（1是）',
    `is_query`       char(1) CHARACTER SET utf8 COLLATE utf8_general_ci      NULL DEFAULT NULL COMMENT '是否查询字段（1是）',
    `query_type`     varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT 'EQ' COMMENT '查询方式（等于、不等于、大于、小于、范围）',
    `html_type`      varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）',
    `dict_type`      varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '' COMMENT '字典类型',
    `sort`           int(11)                                                 NULL DEFAULT NULL COMMENT '排序',
    `create_by`      varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL DEFAULT '' COMMENT '创建者',
    `create_time`    datetime                                                NULL DEFAULT NULL COMMENT '创建时间',
    `update_by`      varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci  NULL DEFAULT '' COMMENT '更新者',
    `update_time`    datetime                                                NULL DEFAULT NULL COMMENT '更新时间',
    PRIMARY KEY (`column_id`) USING BTREE
) ENGINE = InnoDB
  AUTO_INCREMENT = 1
  CHARACTER SET = utf8
  COLLATE = utf8_general_ci COMMENT = '代码生成业务表字段'
  ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of gen_table_column
-- ----------------------------

-- ----------------------------
-- Table structure for gen_group
-- ----------------------------
DROP TABLE IF EXISTS `gen_group`;
CREATE TABLE `gen_group`
(
    `id`          bigint(20)                                                    NOT NULL AUTO_INCREMENT COMMENT '主键',
    `group_name`  varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL     DEFAULT NULL COMMENT '分组名称',
    `group_desc`  varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL     DEFAULT NULL COMMENT '分组描述',
    `create_by`   varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci        NOT NULL DEFAULT ' ' COMMENT '创建人',
    `update_by`   varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci        NOT NULL DEFAULT ' ' COMMENT '修改人',
    `create_time` datetime                                                      NULL     DEFAULT NULL COMMENT '创建人',
    `update_time` datetime                                                      NULL     DEFAULT NULL COMMENT '修改人',
    PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB
  AUTO_INCREMENT = 4
  CHARACTER SET = utf8mb4
  COLLATE = utf8mb4_general_ci COMMENT = '模板分组'
  ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of gen_group
-- ----------------------------
INSERT INTO `gen_group`
VALUES (1, '单表CRUD', '单表CRUD', 'admin', 'admin', '2023-11-07 18:04:33', '2023-11-10 11:20:51');
INSERT INTO `gen_group`
VALUES (2, '主子表CRUD', '主子表CRUD', 'admin', 'admin', '2023-11-08 09:28:19', '2023-11-10 11:20:55');
INSERT INTO `gen_group`
VALUES (3, '树表CRUD', '树表CRUD', 'admin', 'admin', '2023-11-08 09:38:54', '2023-11-10 14:17:12');

-- ----------------------------
-- Table structure for gen_template_group
-- ----------------------------
DROP TABLE IF EXISTS `gen_template_group`;
CREATE TABLE `gen_template_group`
(
    `group_id`    bigint(20) NOT NULL COMMENT '分组id',
    `template_id` bigint(20) NOT NULL COMMENT '模板id',
    PRIMARY KEY (`group_id`, `template_id`) USING BTREE
) ENGINE = InnoDB
  CHARACTER SET = utf8mb4
  COLLATE = utf8mb4_general_ci COMMENT = '模板分组关联表'
  ROW_FORMAT = DYNAMIC;

INSERT INTO `gen_template_group`
VALUES (1, 1);
INSERT INTO `gen_template_group`
VALUES (1, 2);
INSERT INTO `gen_template_group`
VALUES (1, 3);
INSERT INTO `gen_template_group`
VALUES (1, 5);
INSERT INTO `gen_template_group`
VALUES (1, 6);
INSERT INTO `gen_template_group`
VALUES (1, 7);
INSERT INTO `gen_template_group`
VALUES (1, 8);
INSERT INTO `gen_template_group`
VALUES (1, 9);
INSERT INTO `gen_template_group`
VALUES (1, 10);
INSERT INTO `gen_template_group`
VALUES (2, 1);
INSERT INTO `gen_template_group`
VALUES (2, 2);
INSERT INTO `gen_template_group`
VALUES (2, 3);
INSERT INTO `gen_template_group`
VALUES (2, 5);
INSERT INTO `gen_template_group`
VALUES (2, 6);
INSERT INTO `gen_template_group`
VALUES (2, 7);
INSERT INTO `gen_template_group`
VALUES (2, 8);
INSERT INTO `gen_template_group`
VALUES (2, 9);
INSERT INTO `gen_template_group`
VALUES (2, 10);
INSERT INTO `gen_template_group`
VALUES (2, 12);
INSERT INTO `gen_template_group`
VALUES (3, 1);
INSERT INTO `gen_template_group`
VALUES (3, 2);
INSERT INTO `gen_template_group`
VALUES (3, 3);
INSERT INTO `gen_template_group`
VALUES (3, 5);
INSERT INTO `gen_template_group`
VALUES (3, 6);
INSERT INTO `gen_template_group`
VALUES (3, 7);
INSERT INTO `gen_template_group`
VALUES (3, 8);
INSERT INTO `gen_template_group`
VALUES (3, 10);
INSERT INTO `gen_template_group`
VALUES (3, 11);

SET
    FOREIGN_KEY_CHECKS = 1;
